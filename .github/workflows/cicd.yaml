name: "CI/CD Rest API Application"
on:
  workflow_dispatch:

  push:
    branches:
      - main
      - feature/password_in_keyvault

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  create_core_services:
    # Network, KeyVault, PostgreSQL
    name: Deploy resources for restapi
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Create VNet
        run: |
          echo "Checking if VNet exists..."
          if az network vnet show --name ${{ vars.AZURE_VNET_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "VNet already exists."
          else
            echo "Creating VNet..."
            az network vnet create \
              --name ${{ vars.AZURE_VNET_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location ${{ vars.AZURE_LOCATION }} \
              --address-prefixes 10.0.0.0/16
          fi
          address_prefix=1
          for subnet in ${{ vars.AZURE_SUBNET_BE }} ${{ vars.AZURE_SUBNET_FE }} ${{ vars.AZURE_SUBNET_DB }} ; do
            echo "Creating Subnet for $subnet..."
            if [[ "$subnet" == "${{ vars.AZURE_SUBNET_BE }}" ]] || [[ "$subnet" == "${{ vars.AZURE_SUBNET_FE }}" ]]; then
              az network vnet subnet create \
                --name $subnet \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --vnet-name ${{ vars.AZURE_VNET_NAME }} \
                --address-prefixes 10.0.$address_prefix.0/24 \
                --delegations Microsoft.Web/serverFarms
            else
              az network vnet subnet create \
                --name $subnet \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --vnet-name ${{ vars.AZURE_VNET_NAME }} \
                --address-prefixes 10.0.$address_prefix.0/24
            fi
            address_prefix=$((address_prefix + 1))
          done

      - name: Create FE NSG 
        uses: ./.github/actions/CreateNSGRule
        with:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ vars.AZURE_NSG_NAME_FE }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          NSG_RULE_NAME: "AllowTraffic4Port"
          ALLOWED_PORTS: '80,443'

      - name: Create BE NSG
        uses: ./.github/actions/CreateNSGRule
        with:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ vars.AZURE_NSG_NAME_BE }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          NSG_RULE_NAME: ${{ vars.NSG_RULE_NAME }}
          ALLOWED_PORTS: '80,443'

      - name: Create DB NSG 
        uses: ./.github/actions/CreateNSGRule
        with:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ vars.AZURE_NSG_NAME_DB }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          NSG_RULE_NAME: ${{ vars.NSG_RULE_NAME }}
          ALLOWED_PORTS: '5432'


      - name: Create Key Vault
        run: |
          echo "Checking if Key Vault exists..."
          if az keyvault show --name ${{ vars.AZURE_KEY_VAULT_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "Key Vault already exists."
          else
            echo "Creating Key Vault..."
            az keyvault create \
              --name ${{ vars.AZURE_KEY_VAULT_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location ${{ vars.AZURE_LOCATION }}
          fi

          az role assignment create \
             --assignee ${{ vars.DEV_GROUP_ID }} \
             --role "Key Vault Secrets Officer" \
             --scope "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT_NAME }}"

          az role assignment create \
             --assignee ${{ vars.AZURE_CLIENT_ID }} \
             --role "Key Vault Secrets Officer" \
             --scope "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT_NAME }}"

      - name: Create PostgreSQL Server
        id: create_postgres_server
        run: |
          if az postgres flexible-server show --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"; then
            echo "PostgreSQL server already exists."
            echo "Fetching PostgreSQL admin password from Azure Key Vault"
            PASSWORD=$(az keyvault secret show --name "AZURE-POSTGRESQL-ADMIN-PASSWORD" --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --query value -o tsv)
          else
            echo "Generate password for database admin user"
            PASSWORD=$(openssl rand -base64 16)

            echo "Creating PostgreSQL server..."
            az postgres flexible-server create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
              --location "${{ vars.AZURE_LOCATION }}" \
              --admin-user "${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}" \
              --admin-password "$PASSWORD" \
              --tier Burstable \
              --sku-name Standard_B1ms \
              --version 16 \
              --vnet "${{ vars.AZURE_VNET_NAME }}" \
              --subnet "${{ vars.AZURE_SUBNET_DB }}" \
              --yes

            echo "Save PostgreSQL admin user and password in Azure Key Vault"
            az keyvault secret set --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --name "AZURE-POSTGRESQL-ADMIN-PASSWORD" --value "$PASSWORD"
            az keyvault secret set --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --name "AZURE-POSTGRESQL-ADMIN-USER" --value "${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}"

            echo "Create PostgreSQL database"
            az postgres flexible-server db create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --server-name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
              --database-name tasks_db
          fi

          echo "::add-mask::$PASSWORD"
          echo "AZURE-POSTGRESQL-ADMIN-PASSWORD=$PASSWORD" >> $GITHUB_ENV

  build_docker_image:
    name: Build docker image and save in Github Container Registry
    runs-on: ubuntu-latest
    environment: dev
    needs: [create_core_services]
    env:
      WEBAPP_BACKEND_NAME: ${{ vars.WEBAPP_BACKEND_NAME }}
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build docker images and push it to GitHub Container Registry
        run: |
          echo "Log in to GitHub Container Registry"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          echo "Build BE docker image"
          docker build \
            --build-arg POSTGRES_PASSWORD="${{ env.AZURE-POSTGRESQL-ADMIN-PASSWORD }}" \
            -t ghcr.io/$REPO_OWNER_LOWER/rest-api-backend:latest backend_app

          echo "Docker image built successfully"
          echo "Push BE docker image to GitHub Container Registry"
          docker push ghcr.io/$REPO_OWNER_LOWER/rest-api-backend:latest

          VITE_BACKEND_API_URL="https://rest-api-$WEBAPP_BACKEND_NAME.azurewebsites.net"

          echo "Build FE docker image"
          docker build \
            --build-arg VITE_BACKEND_API_URL=$VITE_BACKEND_API_URL \
            -t ghcr.io/$REPO_OWNER_LOWER/rest-api-frontend:latest frontend_app

          echo "Docker image built successfully"
          echo "Push FE docker image to GitHub Container Registry"
          docker push ghcr.io/$REPO_OWNER_LOWER/rest-api-frontend:latest

  create_webapp:
    name: Deploy Web Apps
    runs-on: ubuntu-latest
    environment: dev
    needs: [build_docker_image]

    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Create App Service Plan
        run: |
          echo "Checking if App Service Plan exists..."
          if az appservice plan show --name ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "App Service Plan already exists."
          else
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --location ${{ vars.AZURE_LOCATION }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --sku B2 \
              --is-linux
          fi

      - name: Create backend_app
        run: |
          BACKEND_WEBAPP_NAME="rest-api-${{ vars.WEBAPP_BACKEND_NAME }}"
          PG_SERVER_NAME="${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com"

            REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            echo "Creating Web App..."
            az webapp create \
              --name $BACKEND_WEBAPP_NAME \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --plan ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --container-registry-url ghcr.io \
              --container-image-name $REPO_OWNER_LOWER/rest-api-backend:latest

          echo "Set environment variables for backend web app"
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $BACKEND_WEBAPP_NAME \
            --settings \
              POSTGRES_HOST="$PG_SERVER_NAME" \
              POSTGRES_USER="${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}" \
              POSTGRES_PASSWORD="${{ env.AZURE-POSTGRESQL-ADMIN-PASSWORD }}"

          echo "Enable logging for backend web app"
          az webapp log config \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $BACKEND_WEBAPP_NAME \
            --docker-container-logging filesystem

            echo "VNet integration for backend web app"
            az webapp vnet-integration add \
              --name "$BACKEND_WEBAPP_NAME" \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --vnet "${{ vars.AZURE_VNET_NAME }}" \
              --subnet "${{ vars.AZURE_SUBNET_BE }}"

      - name: Create frontend_app
        run: |
          FRONTEND_WEBAPP_NAME="rest-api-${{ vars.WEBAPP_FRONTEND_NAME }}"
            REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            echo "Creating Web App..."
            az webapp create \
              --name "$FRONTEND_WEBAPP_NAME" \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --plan ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --container-registry-url ghcr.io \
              --container-image-name $REPO_OWNER_LOWER/rest-api-frontend:latest

          echo "Configuring frontend_app settings..."
          az webapp config appsettings set \
            --name $FRONTEND_WEBAPP_NAME \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings "VITE_BACKEND_API_URL=https://rest-api-${{ vars.WEBAPP_BACKEND_NAME }}.azurewebsites.net"

          echo "Enable logging for frontend web app"
          az webapp log config \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $FRONTEND_WEBAPP_NAME \
            --docker-container-logging filesystem

            echo "VNet integration for frontend web app"
            az webapp vnet-integration add \
              --name "$FRONTEND_WEBAPP_NAME" \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --vnet "${{ vars.AZURE_VNET_NAME }}" \
              --subnet "${{ vars.AZURE_SUBNET_FE }}"
