name: "CICD Rest API Application"
on:
  workflow_dispatch:

  push:
    branches:
      - main
      - create_pipline

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  create_postgres_server_and_key_vault:
    name: Deploy resources for restapi
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - name: Create Key Vault
        run: |
          echo "Checking if Key Vault exists..."
          if az keyvault show --name ${{ vars.AZURE_KEY_VAULT_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "Key Vault already exists."
          else
            echo "Creating Key Vault..."
            az keyvault create \
              --name ${{ vars.AZURE_KEY_VAULT_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location ${{ vars.AZURE_LOCATION }}
          fi
           
          az role assignment create \
             --assignee ${{ vars.DEV_GROUP_ID }} \
             --role "Key Vault Secrets Officer" \
             --scope "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT_NAME }}"

          az role assignment create \
             --assignee ${{ vars.AZURE_CLIENT_ID }} \
             --role "Key Vault Secrets Officer" \
             --scope "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT_NAME }}"

      - name: Create PostgreSQL Server
        run: |
          IP=$(curl -s https://ifconfig.me)
          echo "Runner Public IP: $IP"
          if az postgres flexible-server show --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"; then
            echo "PostgreSQL server already exists."
          else
            echo "Creating PostgreSQL server..."
            az postgres flexible-server create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
              --location "${{ vars.AZURE_LOCATION }}" \
              --admin-user "${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}" \
              --admin-password "${{ secrets.AZURE_POSTGRESQL_ADMIN_PASSWORD }}" \
              --tier Burstable \
              --sku-name Standard_B1ms \
              --version 16 \
              --public-access $IP
            fi
            az keyvault secret set --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --name "AZURE-POSTGRESQL-ADMIN-PASSWORD" --value "${{ secrets.AZURE_POSTGRESQL_ADMIN_PASSWORD }}"
            az keyvault secret set --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --name "AZURE-POSTGRESQL-ADMIN-USER" --value "${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}"

            echo "Create PostgreSQL database"
            az postgres flexible-server db create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --server-name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
              --database-name tasks_db

            # echo "Allow public access from any Azure service within Azure to this server"
            # az postgres flexible-server update \
            #   --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            #   --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
            #   --public-network-access Enabled

  build_docker_image:
    name: Build docker image and save in Github Container Registry
    runs-on: ubuntu-latest
    environment: dev
    env:
      PG_ADMIN_USER: ${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}
      PG_ADMIN_PASSWORD: ${{ secrets.AZURE_POSTGRESQL_ADMIN_PASSWORD }}
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      KEY_VAULT_NAME: ${{ vars.AZURE_KEY_VAULT_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build docker images and push it to GitHub Container Registry
        run: |
          echo "Log in to GitHub Container Registry"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          echo "Build BE docker image"
          docker build -t ghcr.io/$REPO_OWNER_LOWER/rest-api-backend:latest backend_app
          echo "Docker image built successfully"
          echo "Push BE docker image to GitHub Container Registry"
          docker push ghcr.io/$REPO_OWNER_LOWER/rest-api-backend:latest
          echo "Build FE docker image"
          docker build -t ghcr.io/$REPO_OWNER_LOWER/rest-api-frontend:latest frontend_app
          echo "Docker image built successfully"
          echo "Push FE docker image to GitHub Container Registry"
          docker push ghcr.io/$REPO_OWNER_LOWER/rest-api-frontend:latest

  create_webapp:
    name: Deploy resources for restapi
    runs-on: ubuntu-latest
    environment: dev
    needs: [create_postgres_server_and_key_vault, build_docker_image]

    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - name: Create App Service Plan
        run: |
          echo "Checking if App Service Plan exists..."
          if az appservice plan show --name ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "App Service Plan already exists."
          else
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --location ${{ vars.AZURE_LOCATION }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --sku B2 \
              --is-linux
          fi
      - name: Create backend_app
        run: |
          BACKEND_WEBAPP_NAME="rest-api-${{ vars.WEBAPP_BACKEND_NAME }}"
          PG_SERVER_NAME="${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com"

          if az webapp show --name $BACKEND_WEBAPP_NAME --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "Web App already exists."
          else
            REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            echo "Creating Web App..."
            az webapp create \
              --name $BACKEND_WEBAPP_NAME \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --plan ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --container-registry-url ghcr.io \
              --container-image-name $REPO_OWNER_LOWER/rest-api-backend:latest
          fi

          echo "Set environment variables for backend web app"
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $BACKEND_WEBAPP_NAME \
            --settings \
              POSTGRES_HOST="$PG_SERVER_NAME" \
              POSTGRES_USER="${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}" \
              POSTGRES_PASSWORD="${{ secrets.AZURE_POSTGRESQL_ADMIN_PASSWORD }}"

          echo "Enable logging for backend web app"
          az webapp log config \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $BACKEND_WEBAPP_NAME \
            --docker-container-logging filesystem

      - name: Create frontend_app
        run: |
          FRONTEND_WEBAPP_NAME="rest-api-${{ vars.WEBAPP_FRONTEND_NAME }}"
          if az webapp show --name $FRONTEND_WEBAPP_NAME --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "Web App already exists."
          else
            REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            echo "Creating Web App..."
            az webapp create \
              --name "$FRONTEND_WEBAPP_NAME" \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --plan ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --container-registry-url ghcr.io \
              --container-image-name $REPO_OWNER_LOWER/rest-api-frontend:latest
          fi
          echo "Configuring frontend_app settings..."
          az webapp config appsettings set \
            --name $FRONTEND_WEBAPP_NAME \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings "VITE_BACKEND_API_URL=https://rest-api-${{ vars.WEBAPP_BACKEND_NAME }}.azurewebsites.net"
