name: "CI/CD Rest API Application"
on:
  workflow_dispatch:

  push:
    branches:
      - main
      - feature/password_in_keyvault

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  create_core_services:
    # Network, KeyVault, PostgreSQL
    name: Deploy resources for restapi
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Create VNet
        run: |
          echo "Checking if VNet exists..."
          if az network vnet show --name ${{ vars.AZURE_VNET_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "VNet already exists."
          else
            echo "Creating VNet..."
            az network vnet create \
              --name ${{ vars.AZURE_VNET_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location ${{ vars.AZURE_LOCATION }} \
              --address-prefixes 10.0.0.0/16
          fi
          address_prefix=1

          # Define subnet delegation mapping
          declare -A subnet_delegations
          subnet_delegations["${{ vars.AZURE_SUBNET_BE }}"]="Microsoft.Web/serverFarms"
          subnet_delegations["${{ vars.AZURE_SUBNET_FE }}"]="Microsoft.Web/serverFarms"
          subnet_delegations["${{ vars.AZURE_SUBNET_DB }}"]="Microsoft.DBforPostgreSQL/flexibleServers"

          for subnet in ${{ vars.AZURE_SUBNET_BE }} ${{ vars.AZURE_SUBNET_FE }} ${{ vars.AZURE_SUBNET_DB }} ; do
            echo "Creating Subnet for $subnet..."
            delegation="${subnet_delegations[$subnet]}"
            if [[ -n "$delegation" ]]; then
              az network vnet subnet create \
                --name $subnet \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --vnet-name ${{ vars.AZURE_VNET_NAME }} \
                --address-prefixes 10.0.$address_prefix.0/24 \
                --delegations $delegation
            else
              az network vnet subnet create \
                --name $subnet \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --vnet-name ${{ vars.AZURE_VNET_NAME }} \
                --address-prefixes 10.0.$address_prefix.0/24
            fi
            address_prefix=$((address_prefix + 1))
          done

      # Allow 80 and 443 ports fro,
      - name: Create FE NSG
        uses: ./.github/actions/CreateNSGRule
        with:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ vars.AZURE_NSG_NAME_FE }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          NSG_RULE_NAME: "AllowTraffic4Port"
          ALLOWED_PORTS: "80,443"

      # No need any specific rules for BE NSG
      # Needed functionality covered by default rules
      - name: Create BE NSG
        uses: ./.github/actions/CreateNSGRule
        with:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ vars.AZURE_NSG_NAME_BE }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}

      # No need any specific rules for BE NSG
      # Needed functionality covered by default rules
      - name: Create DB NSG
        uses: ./.github/actions/CreateNSGRule
        with:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_NSG_NAME: ${{ vars.AZURE_NSG_NAME_DB }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}

      - name: Create Key Vault
        run: |
          echo "Checking if Key Vault exists..."
          if az keyvault show --name ${{ vars.AZURE_KEY_VAULT_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "Key Vault already exists."
          else
            echo "Creating Key Vault..."
            az keyvault create \
              --name ${{ vars.AZURE_KEY_VAULT_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --location ${{ vars.AZURE_LOCATION }}
          fi

          az role assignment create \
             --assignee ${{ vars.DEV_GROUP_ID }} \
             --role "Key Vault Secrets Officer" \
             --scope "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT_NAME }}"

          az role assignment create \
             --assignee ${{ vars.AZURE_CLIENT_ID }} \
             --role "Key Vault Secrets Officer" \
             --scope "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ vars.AZURE_KEY_VAULT_NAME }}"

      - name: Create PostgreSQL Server
        id: create_postgres_server
        run: |
          if az postgres flexible-server show --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"; then
            echo "PostgreSQL server already exists."
            echo "Fetching PostgreSQL admin password from Azure Key Vault"
            PASSWORD=$(az keyvault secret show --name "AZURE-POSTGRESQL-ADMIN-PASSWORD" --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --query value -o tsv)
          else
            echo "Generate password for database admin user"
            PASSWORD=$(openssl rand -base64 16)

            echo "Creating PostgreSQL server..."
            az postgres flexible-server create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
              --location "${{ vars.AZURE_LOCATION }}" \
              --admin-user "${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}" \
              --admin-password "$PASSWORD" \
              --tier Burstable \
              --sku-name Standard_B1ms \
              --version 16 \
              --vnet "${{ vars.AZURE_VNET_NAME }}" \
              --subnet "${{ vars.AZURE_SUBNET_DB }}" \
              --yes

            echo "Save PostgreSQL admin user and password in Azure Key Vault"
            az keyvault secret set --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --name "AZURE-POSTGRESQL-ADMIN-PASSWORD" --value "$PASSWORD"
            az keyvault secret set --vault-name "${{ vars.AZURE_KEY_VAULT_NAME }}" --name "AZURE-POSTGRESQL-ADMIN-USER" --value "${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}"

            echo "Create PostgreSQL database"
            az postgres flexible-server db create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
              --server-name "${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}" \
              --database-name tasks_db
          fi

          echo "::add-mask::$PASSWORD"
          echo "AZURE-POSTGRESQL-ADMIN-PASSWORD=$PASSWORD" >> $GITHUB_ENV

  build_docker_image:
    name: Build docker image and save in Github Container Registry
    runs-on: ubuntu-latest
    environment: dev
    needs: [create_core_services]
    env:
      WEBAPP_BACKEND_NAME: ${{ vars.WEBAPP_BACKEND_NAME }}
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build and push BE Docker image
        uses: ./.github/actions/CreateDockerImage
        with:
          docker_password: ${{ secrets.GITHUB_TOKEN }}
          docker_username: ${{ github.actor }}
          docker_owner: ${{ github.repository_owner }}
          image_name: rest-api-backend
          source_path: backend_app
          tag: latest
          docker_args: |
            POSTGRES_PASSWORD="11qewewew"
            POSTGRES_HOST="${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com"
            POSTGRES_USER="${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}"

      - name: Build and push FE Docker image
        uses: ./.github/actions/CreateDockerImage
        with:
          docker_password: ${{ secrets.GITHUB_TOKEN }}
          docker_username: ${{ github.actor }}
          docker_owner: ${{ github.repository_owner }}
          image_name: rest-api-frontend
          source_path: frontend_app
          tag: latest
          docker_args: |
            VITE_BACKEND_API_URL="https://rest-api-$WEBAPP_BACKEND_NAME.azurewebsites.net"

  deploy_web_apps:
    name: Deploy Web Apps
    runs-on: ubuntu-latest
    environment: dev
    needs: [build_docker_image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Create App Service Plan
        run: |
          echo "Checking if App Service Plan exists..."
          if az appservice plan show --name ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}; then
            echo "App Service Plan already exists."
          else
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }} \
              --location ${{ vars.AZURE_LOCATION }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --sku B2 \
              --is-linux
          fi

      - name: Create backend_app
        uses: ./.github/actions/CreateWebAPP
        with:
          WEBAPP_NAME: "rest-api-${{ vars.WEBAPP_BACKEND_NAME }}"
          AZURE_APP_SERVICE_PLAN_NAME: ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          WEBAPP_VNET_NAME: ${{ vars.AZURE_VNET_NAME }}
          WEBAPP_SUBNET: ${{ vars.AZURE_SUBNET_BE }}
          CONTAINER_IMAGE_NAME: "${{ github.repository_owner }}/rest-api-backend:latest"
          ENABLE_APP_IDENTITY: true
          WEBAPP_SETTINGS: 'POSTGRES_HOST="${{ vars.AZURE_POSTGRESQL_SERVER_NAME }}.postgres.database.azure.com" POSTGRES_USER="${{ secrets.AZURE_POSTGRESQL_ADMIN_USER }}" POSTGRES_PASSWORD="@Microsoft.KeyVault(SecretUri=https://${{ vars.AZURE_KEY_VAULT_NAME }}.vault.azure.net/secrets/AZURE-POSTGRESQL-ADMIN-PASSWORD)"'

      - name: Grant permissions to the BackendApp managed identity
        run: |
          APP_PRINCIPAL_ID=$(az webapp identity show -g "${{ secrets.AZURE_RESOURCE_GROUP }}" -n "rest-api-${{ vars.WEBAPP_BACKEND_NAME }}" --query principalId -o tsv)
          echo "Granting Key Vault access to Backend APP ($APP_PRINCIPAL_ID)"
          az role assignment create \
            --assignee-object-id "$APP_PRINCIPAL_ID" \
            --assignee-principal-type ServicePrincipal \
            --role "Key Vault Secrets User" \
            --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Web/sites/rest-api-${{ vars.WEBAPP_BACKEND_NAME }}

      - name: Create frontend_app
        uses: ./.github/actions/CreateWebAPP
        with:
          WEBAPP_NAME: "rest-api-${{ vars.WEBAPP_FRONTEND_NAME }}"
          AZURE_APP_SERVICE_PLAN_NAME: ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          WEBAPP_VNET_NAME: ${{ vars.AZURE_VNET_NAME }}
          WEBAPP_SUBNET: ${{ vars.AZURE_SUBNET_FE }}
          CONTAINER_IMAGE_NAME: "${{ github.repository_owner }}/rest-api-frontend:latest"
          WEBAPP_SETTINGS: 'VITE_BACKEND_API_URL="https://rest-api-${{ vars.WEBAPP_BACKEND_NAME }}.azurewebsites.net"'
